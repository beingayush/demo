package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.websocket.server.PathParam;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/create") // Map ONLY POST Requests
    public @ResponseBody
    Integer addNewUser (@RequestParam String name
            , @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);
        n = userRepository.save(n);
        return n.getId();
    }

    @GetMapping(path = "/{id}")
    public @ResponseBody
    User getUser(@PathVariable("id") int id) {
        User user = userRepository.findById(id).get();
        return user;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path="/edit/{id}")
    public @ResponseBody
    String updateUser(@PathParam("id") Integer id, @RequestParam String name
            , @RequestParam String email, @RequestParam String password) {


        Optional<User> user = userRepository.findById(id);
        user.get().setName(name);
        user.get().setEmail(email);
        user.get().setPassword(password);
        userRepository.save(user.get());
        return "success";

    }

    @DeleteMapping(path="/{id}")
    String deleteUser(@PathParam("id") Integer id) {

        userRepository.deleteById(id);
        return "success";
    }


}
